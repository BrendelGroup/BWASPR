#Rscript.BWASPR
#Version:	November 6, 2017
#Contact:	Volker Brendel (vbrendel@indiana.edu)
#Documentation:	https://github.com/brendelgroup/BWASPR

#Load required libraries and set options:
#
library("BWASPR")
library("parallel")

options(width=240)
options(max.print=1000000)
options(digits=3)
options(warn=-1)


#Read the required BWASPR .conf file to set parameters.
#Usage example: Rscript Rscript.BWASPR Am_HE
#  would read the configuration files Am_HE.conf
#
args       <- commandArgs(trailingOnly = TRUE)
if (length(args) == 0) {
  exit
} else {
  configfile <- paste(args[1],"conf",sep=".")
  outputdir <- paste("Routput",args[1],sep="-")
  if (length(args) > 1) {
    outputdir <- args[2]
  }
}
source(configfile)

message("Rscript.BWASPR is being run with .conf file ",configfile," and output directory ",outputdir,"\n\n")
cmd <- paste("mkdir -p",outputdir,sep=" ")
# message(".. now executing: ",cmd)
system(cmd)
readme <- paste("Rscript.BWASPR output for .conf file ",configfile,".\n\n",
                "Data input are the specified *.mcalls files and parameters set in ",configfile,".\n",
                "The *.mcalls input data are saved in the following data structures:\n\n",
                "studymk - a methylKit methylRaw(List) object storing the CpGhsm site data for all samples\n",
                "studymc - a methylKit methylRaw(List) object storing the CpGscd site data for all samples\n",
                "studyhc - a methylKit methylRaw(List) object storing the CpGscd site data for all samples,\n",
                 "           restricted to sites with high coverage (here set to ",highcoverage,")\n",
                "mkdf    - a methylKit methylRaw(List) object storing the CpGhsm site data for all\n",
                "            replicates of a given sample\n\n",
                "Output of the analysis is stored in the following subdirectories (if the corresponding\n",
                 " function calls were specified in ",configfile,"; please consult the 0README\n",
                 " files in the subdirectories for details on the output files):\n\n",
                "CMS - Coverage and methylation statistics for aggregate samples\n",
                "PWC - Pairwise comparisons between all samples\n",
                "CRL - Correlations between aggregate samples\n",
                "REPCMS - Coverage and methylation statistics for replicate samples\n",
                "REPCRL - Correlations between replicates\n",
                "MMP - Mapping of methylation sites on genome annotation\n",
                "ACS - Annotation of conserved methylation sites\n",
                "RNK - Genomic feature regions ranked by CpGhsm statistics\n",
                "MPRR - Methylation-poor and -rich regions\n",
                "DMSG - Differentially methylateds sites and genes\n",
                "OGL - Ordered gene lists\n",
                sep="")
readmefile <- paste(outputdir,"0README",sep="/")
sink(readmefile)
cat(sprintf("%s",readme))
sink()

#Based on the configuration file, set some basic parameters ...
#
stype <- paste(type,"hsm",sep="")
ctype <- paste(type,"scd",sep="")

#... and pull out the assembly version, number of potential (CpG or RBBS) methylation
#  sites, genome size, and status of UTR annotation (from the parameter file):
#
asmblv     <- infiles$parameters[infiles$parameters$Variable == "ASSEMBLYVERSION",2]
nbrpms     <- as.numeric(infiles$parameters[infiles$parameters$Variable == "TOTALNBRPMSITES",2])
gnmsize    <- as.numeric(infiles$parameters[infiles$parameters$Variable == "GENOMESIZE",2])
UTRFLAGSET <- as.numeric(infiles$parameters[infiles$parameters$Variable == "UTRFLAGSET",2])


#The RUN* logicals in the configuration file determine which parts of the
#  workflow should be run.
#


### Section: Load necessary data to proceed.
##
#
if (RUNload) {
#Either read data from a previously saved workflow run or call mcalls2mkobj() to
#  produce the required methylRawList objects. studymk contains the data for the
#  hsm sites, while studymc contains the data for all scd sites.
#
  speciesstudy <- paste(species,study,sep="_")
  rdatafile <- paste(speciesstudy,"RData",sep=".")
  message(".. loading previously stored image ", rdatafile, " ...")
  load(rdatafile)
#Read the configuration file again so that the load command does not overwrite
#  intended current settings.
  source(configfile)
  message(".. done ...")
} else {
#Create the methylKit raw objects:
#
  studymk <- mcalls2mkobj(infiles$datafiles,species=species,study=study,sample=samplelist,
                          replicate=c(0),type=stype,mincov=1,assembly=asmblv)
  studymc <- mcalls2mkobj(infiles$datafiles,species=species,study=study,sample=samplelist,
                          replicate=c(0),type=ctype,mincov=1,assembly=asmblv)
}
################################################################################



### Section: Coverage and methylation statistics.
##
#
if (RUNcms) {
#Produce cms-*txt and cms-*.pdf files reporting on coverage and methylation statistics.
#
  plotfile <- paste("cms",species,sep="-")
  plotfile <- paste(plotfile,studyLabel,sep="_")
  message("\n.. coverage and methylation statistics for aggregate samples ...")
  tmpN <- lapply(studymk,function(x) {plotfile <- paste(plotfile,x@sample.id,sep="_");
                                      outfile  <- paste(plotfile,"txt",sep=".");
                                      cmStats(x,stype,covlist,locount,hicount,outfile=outfile,plotfile=plotfile)
                                     }
                )
  CMSdir <- paste(outputdir,"CMS",sep="/")
  cmd <- paste("mkdir -p ",CMSdir,"; mv cms-* ",CMSdir,sep="")
# message("\n.. now executing: ",cmd)
  system(cmd)
  readme <- paste("CMS - Coverage and methylation statistics for aggregate samples.\n\n",
                  "Input: studymk, covlist, locount, hicount\n\n",
                  "Output: files cms-*txt and cms-*pdf\n\n",
                  "Notes: The statistics are given for CpGhsm sites restricted to minimum or\n",
                  "        higher level coverage.  At the minimum level, the number of sites will\n",
                  "        the number of lines of the corresponding *CpGhsm.mcalls file minus one\n",
                  "        (consistency check).  The distribution of methylation levels is really only\n",
                  "        interesting for high coverage because at low coverage there will be a strong\n",
                  "        bias towards high methylation levels (by definition of hsm sites).\n",
                  "        The same bias at high coverage would suggest that the sample includes a\n",
                  "        preponderance of consistently methylated genomic sites.\n\n",
                  "        locount and hicount set bounds on the coverage to exclude sites with too few\n",
                  "        or too many covering reads to provide statistics on a typical range.\n",
                  sep="")
  readmefile <- paste(CMSdir,"0READMEcms",sep="/")
  sink(readmefile)
  cat(sprintf("%s",readme))
  sink()
  message(".. done ...")
}
################################################################################



### Section: Comparing aggregate data among samples.
##
#
if (RUNpwc) {
  l <- length(studymk@treatment)
  if (l < 2) {
    message("\n.. no pairs to compare ....")
  } else if (l == 2) {
#First, produce pairwise sample site comparisons and save the output in file
#  pwc-*.txt and plots in pwc-*.pdf.
#
    sample1hsm <- methylKit::getData(studymk[[1]])
    sample1scd <- methylKit::getData(studymc[[1]])
    s1l <- sampleLabels[[1]]
    sample2hsm <- methylKit::getData(studymk[[2]])
    sample2scd <- methylKit::getData(studymc[[2]])
    s2l <- sampleLabels[[2]]
    outf1 <- "pwc" 
    outf2<- paste(s1l,s2l,sep=".vs.")
    outfile <- paste(outf1,outf2,sep="-")
    plotfile <- paste(outfile,"pdf",sep=".")
    outfile <- paste(outfile,"txt",sep=".")
    sink(outfile)
    message("... comparing ", s1l, " versus ", s2l, " ...")
    cuSlist <- cmpSites(sample1hsm,sample1scd,s1l,sample2hsm,sample2scd,s2l,nbrpms,plotfile,covlist,hheight)
    sink()
  } else {
#First, produce pairwise sample site comparisons and save the output in files
#  pwc-* (done in parallel).
#  Note: no plots are generated - for unclear reasons, venneuler stalls when invoked on a cluster ...
#
  v <- c(1:length(studymk@treatment))
  numprcINcl <- dim(combn(v,2))[2]
  if (numprcINcl > numprc) {numprcINcl <- numprc}
  cl <- makeCluster(numprcINcl,type="FORK",outfile="")
  message("\n.. running pairwise comparisons ...")
  
  cusData <- parApply(cl, combn(v,2), 2, function (x) {
      sample1hsm <- methylKit::getData(studymk[[x[1]]])
      sample1scd <- methylKit::getData(studymc[[x[1]]])
      s1l <- sampleLabels[[x[1]]]
      sample2hsm <- methylKit::getData(studymk[[x[2]]])
      sample2scd <- methylKit::getData(studymc[[x[2]]])
      s2l <- sampleLabels[[x[2]]]
      outf1 <- "pwc" 
      outf2<- paste(s1l,s2l,sep=".vs.")
      outfile <- paste(outf1,outf2,sep="-")
      outfile <- paste(outfile,"txt",sep=".")
      sink(outfile)
      message("... comparing ", s1l, " versus ", s2l, " ...")
      cuSlist <- cmpSites(sample1hsm,sample1scd,s1l,sample2hsm,sample2scd,s2l,nbrpms,plotfile="",covlist)
      sink()
      return(cuSlist)
    })
  #cusData is a list of lists.  The outer list contains data for each pairwise
  #  comparison.  These data are in the form of lists of data frames as returned
  #  by cmpSites(): for each comparions, the data frames are
  #    commonHSM, unique1HSM, unique2HSM,
  #    commonSCD, unique1SCD, unique2SCD,
  #    hsm1cSCD, unique1HSMn2SCD,
  #    hsm2cSCD, unique2HSMn1SCD,
  #    unique1HSM2SCD, unique2HSM1SCD.
  #  For details, see the *.txt output files of the above code section.
  }
  PWCdir <- paste(outputdir,"PWC",sep="/")
  cmd <- paste("mkdir -p ",PWCdir,"; mv pwc* ",PWCdir,sep="")
# message("\n.. now executing: ",cmd)
  system(cmd)
  readme <- paste("PWC - Pairwise comparisons between all samples.\n\n",
                  "Input: mkstudy, mcstudy, nbrpms\n\n",
                  "Output: files pwc-*.txt pwc-.*pdf\n\n",
                  "Notes: The output is generated by BWASPR::cmpSites(), which determines for each pairwise\n",
                  "        comparison the numbers of common and distinct sites.  The function also calculates\n",
                  "        the overlap index between the samples and estimates the size of the common pool of\n",
                  "        potential methylation sites.\n\n",
                  "       The CpGscd data input (mcstudy) is necessary to determine sites that are detectable\n",
                  "        in both samples, and nbrpms (listed in the *.par file specified in the ",configfile,"\n",
                  "        configuration file as argument to TOTALNBRPMSITES) provides the total number of\n",
                  "        potential methylation sites (typically, all CpG sites), a necessary parameter for\n",
                  "        the estimations.\n\n",
                  sep="")
  readmefile <- paste(PWCdir,"0READMEpwc",sep="/")
  sink(readmefile)
  cat(sprintf("%s",readme))
  sink()
  message(".. done ...")
}


if (RUNcrl) {
#Second, produce correlations between methylation levels in common sites of
#  aggregate samples.
#  Output will be in crl-*txt and crl-*pdf files.
#
  plotfile <- paste("crl",species,sep="-")
  plotfile <- paste(plotfile,studyLabel,sep="_")
  outfile <- paste(plotfile,"txt",sep=".")
  sink(outfile)
  message("\n.. running aggregate sample pairwise correlations ...")
  mymessage <- sprintf("\n... comparing aggregate type %s data for all %s samples (destrand=%s) ...",type,studyLabel,destrand)
  message(mymessage)
  studyData <- cmpSamples(studymk,destrand=destrand,plotfile=plotfile)
  cat(sprintf("\nThe number of conserved sites is %6d.\n\n",dim(studyData)[1]))
  sink()

  CRLdir <- paste(outputdir,"CRL",sep="/")
  cmd <- paste("mkdir -p ",CRLdir,"; mv crl* ",CRLdir,sep="")
# message("\n.. now executing: ",cmd)
  system(cmd)
  readme <- paste("CRL - Correlations between aggregate samples.\n\n",
                  "Input: studymk\n\n",
                  "Output: files crl-*.txt crl-*.pdf\n\n",
                  "Notes: The output is generated by BWASPR::cmpSamples(), which uses methylKit::unite()\n",
                  "        to determine the sites common to all samples and applies methylKit::getCorrelation()\n",
                  "        and methylKit::PCASamples().  The *.txt files show the correlations in a table, and\n",
                  "        the *.pdf files show graphics.\n\n",
                  "       Beware that the number of common sites (shown at the bottom of the *.txt files) may be\n",
                  "        small, which may make the correlations less informative.\n\n",
                  sep="")
  readmefile <- paste(CRLdir,"0READMEcrl",sep="/")
  sink(readmefile)
  cat(sprintf("%s",readme))
  sink()
  message(".. done ...")
}
################################################################################



### Section: Comparisons between replicate samples.
##
#
if (hasreplicates & (RUNrepcms | RUNrepcrl)) {
#Compare replicates for all samples.
#
  mymessage <- sprintf("\n\n  Comparison of replicates for all samples in %s study %s.\n",species,studyLabel)
  message(mymessage)

  csR <- lapply(samplelist,function(x) {
           mkdf <- mcalls2mkobj(infiles$datafiles,species,study,sample=x,
                                replicate=c(1:10),type=stype,mincov=1,assembly=asmblv
                               )
           if (is.null(mkdf)) {	# ... return if there are no replicates for a particular sample
               return(NULL)
           }


if (RUNrepcms) {
#Produce repcms-*txt and repcms-*.pdf files reporting on coverage and methylation statistics for
#  all sample replicates separately.
#
           rplotfile <- paste("repcms",species,sep="-")
           rplotfile <- paste(rplotfile,studyLabel,sep="_")
           message("\n.. coverage and methylation statistics for replicates ...")
           tmpN <- lapply(mkdf,function(y) {rplotfile <- paste(rplotfile,y@sample.id,sep="_")
                     routfile <- paste(rplotfile,"txt",sep=".")
                     cmStats(y,stype,repcovlist,replocount,rephicount,outfile=routfile,plotfile=rplotfile)
                     }
                   )
           message(".. done ...")
}


if (RUNrepcrl) {
#Produce correlations between methylation levels in common sites of replicates.
#  Output will be in repcrl-*txt and repcrl-*pdf files.
#
           outfile <- paste("repcrl",species,sep="-")
           outfile <- paste(outfile,studyLabel,x,sep="_")
           outfile <- paste(outfile,"txt",sep=".")
           sink(outfile)
           mymessage <- sprintf("\n.. comparing replicates of sample %s ...\n",x)
           message(mymessage)
           plotfile <- paste("repcrl",species,sep="-")
           plotfile <- paste(plotfile,studyLabel,x,sep="_")
           mkData <- cmpSamples(mkdf,destrand=destrand,plotfile=plotfile)
           cat(sprintf("\nThe number of conserved sites is %6d.\n\n",dim(mkData)[1]))
           sink()
           message(".. done ...")
  
           return(mkData)
} else {
           return(NULL)
}

           }
         )


if (RUNrepcms) {
  REPCMSdir <- paste(outputdir,"REPCMS",sep="/")
  cmd <- paste("mkdir -p ",REPCMSdir,"; mv repcms* ",REPCMSdir,sep="")
# message("\n.. now executing: ",cmd)
  system(cmd)
  readme <- paste("REPCMS - Coverage and methylation statistics for replicate samples.\n\n",
                  "Input: studymk, repcovlist, replocount, rephicount\n\n",
                  "Output: files repcms-*txt and repcms-*pdf\n\n",
                  "Notes: The statistics are given for CpGhsm sites restricted to minimum or\n",
                  "        higher level coverage.  At the minimum level, the number of sites will\n",
                  "        the number of lines of the corresponding *CpGhsm.mcalls file minus one\n",
                  "        (consistency check).  The distribution of methylation levels is really only\n",
                  "        interesting for high coverage because at low coverage there will be a strong\n",
                  "        bias towards high methylation levels (by definition of hsm sites).\n",
                  "        The same bias at high coverage would suggest that the sample includes a\n",
                  "        preponderance of consistently methylated genomic sites.\n\n",
                  "        replocount and rephicount set bounds on the coverage to exclude sites with too few\n",
                  "        or too many covering reads to provide statistics on a typical range.\n",
                  sep="")
  readmefile <- paste(REPCMSdir,"0READMErepcms",sep="/")
  sink(readmefile)
  cat(sprintf("%s",readme))
  sink()
  message(".. done ...")
}


if (RUNrepcrl) {
  REPCRLdir <- paste(outputdir,"REPCRL",sep="/")
  cmd <- paste("mkdir -p ",REPCRLdir,"; mv repcrl-* ",REPCRLdir,sep="")
# message("\n.. now executing: ",cmd)
  system(cmd)
  readme <- paste("REPCRL - Correlations between replicates.\n\n",
                  "Input: mkdf\n\n",
                  "Output: files repcrl-*.txt repcrl-*.pdf\n\n",
                  "Notes: The output is generated by BWASPR::cmpSamples(), which uses methylKit::unite()\n",
                  "        to determine the sites common to all replicates and applies methylKit::getCorrelation()\n",
                  "        and methylKit::PCASamples().  The *.txt files show the correlations in a table, and\n",
                  "        the *.pdf files show graphics.\n\n",
                  "       Beware that the number of common sites (shown at the bottom of the *.txt files) may be\n",
                  "        small, which may make the correlations less informative.\n\n",
                  sep="")
  readmefile <- paste(REPCRLdir,"0READMErepcrl",sep="/")
  sink(readmefile)
  cat(sprintf("%s",readme))
  sink()
  message(".. done ...")
}

#csR is a list of methylRaw objects, each representing the methylKit::unite() set of
#  sites common to all replicates of a particular sample.
#  For details, see the *.txt output files of the above code section.
} ### end if (hasreplicates & (RUNrepcms | RUNrepcrl))
################################################################################



### Section: Connecting methylation patterns with genome annotation.
##
#
if (RUNmmp) {
#Determine where the hsm sites fall relative to the genome annotation features
#  (genes, exons, etc.).
#  Output will be in mmp-* files.
#
  message("\n.. generate methylation to annotation maps ...")
  if (!exists("genome_ann")) {
    genome_ann <- get_genome_annotation(infiles$parameters)
  }
  tmpN <- lapply(c(1:length(sampleLabels)),function(i) {
    sampleL  <- paste(sampleLabels[i],"hsm",sep="_")
    controlL <- paste(sampleLabels[i],"scd",sep="_")
    outfile  <- paste("mmp",sampleLabels[i],sep="-")
    outfile  <- paste(outfile,"txt",sep=".")
    tmp <- map_methylome(studymk[[i]],sampleL,studymc[[i]],controlL,genome_ann,
                         species,gnmsize,UTRflag=UTRFLAGSET,outfile)
    }
    )
  MMPdir <- paste(outputdir,"MMP",sep="/")
  cmd <- paste("mkdir -p ",MMPdir,"; mv mmp-* ",MMPdir,sep="")
# message("\n.. now executing: ",cmd)
  system(cmd)
  readme <- paste("MMP - Mapping of methylation sites on genome annotation.\n\n",
                  "Input: studymk, studymc, genome_ann (a list of GRanges objects providing annotated region labels\n",
                  "        and boundaries; output of BWASPR::get_genome_annotation())\n\n",
                  "Output: files mmp-*.txt\n\n",
                  "Notes: The output is generated by BWASPR::map_methylome() and gives an accounting for every sample\n",
                  "        as to where the CpGhsm and CpGscd (control) sites reside relative to the genome annotation.\n",
                  "       Abbreviations used: O/E, observed over expected\n",
                  "                           (expected percentages are based on the respective feature proportions\n",
                  "                            in the genome, as annotated).\n\n",
                  sep="")
  readmefile <- paste(MMPdir,"0READMEmmp",sep="/")
  sink(readmefile)
  cat(sprintf("%s",readme))
  sink()
  message(".. done ...")
}


if (RUNacs) {
#Show methylation / annotation connections for sites common to all studymk
#  samples.
#  Output will be in the acs-*.txt file.
#
  library(methods)
  library(utils)
  message("\n.. annotating conserved sites ...")
  genome_ann <- get_genome_annotation(infiles$parameters)
  outfile <- paste("acs",species,sep="-")
  outfile <- paste(outfile,studyLabel,sep="_")
  outfile <- paste(outfile,"txt",sep=".")
  methylome_ann <- annotate_methylome(studymk,genome_ann,destrand=destrand,
                                      outfile=outfile)
  ACSdir <- paste(outputdir,"ACS",sep="/")
  cmd <- paste("mkdir -p ",ACSdir,"; mv acs* ",ACSdir,sep="")
# message("\n.. now executing: ",cmd)
  system(cmd)
  readme <- paste("ACS - Annotation of conserved methylation sites.\n\n",
                  "Input: studymk, genome_ann (a list of GRanges objects providing annotated region labels and bounds;\n",
                  "                            output of BWASPR::get_genome_annotation())\n\n",
                  "Output: file acs-*.txt\n\n",
                  "Notes: The output is generated by BWASPR::annotate_methylome(), which uses methylKit::unite()\n",
                  "        to determine the sites common to all replicates and applies methylKit::annotateWithFeature().\n",
                  "        The acs-*.txt files show the common sites with methylation levels in all samples\n",
                  "        and columns with booleans indicating whether the site fits a specific annotation feature.\n\n",
                  "       Abbreviations used: pc, protein coding; nc, non-coding; fp, five prime; tp, three prime.\n",
                  "                           UTR, untranslated region; unique, not overlapping with other categories.\n\n",
                  sep="")
  readmefile <- paste(ACSdir,"0READMEacs",sep="/")
  sink(readmefile)
  cat(sprintf("%s",readme))
  sink()
  message(".. done ...")
}
################################################################################



### Section: Determination of methylation site poor and rich regions.
##
#
if (RUNrnk) {
#Produce rnk*txt and rnk*.pdf files showing methylation-density ranked annotated regions.
#
  if (!exists("genome_ann")) {
    genome_ann <- get_genome_annotation(infiles$parameters)
  }
  speciesstudy <- paste(species,studyLabel,sep="_")
  message("\n.. ranked genes for each sample ...")
  rgL <- rank_rbm(studymk,region.gr=genome_ann$gene,rlabel="sig",
                  withglink=glink,speciesstudy)
  message(".. done ...")
  message("\n.. ranked promoters for each sample ...")
  rgL <- rank_rbm(studymk,region.gr=genome_ann$promoter,rlabel="sip",
                  withglink=glink,speciesstudy)
  RNKdir <- paste(outputdir,"RNK",sep="/")
  cmd <- paste("mkdir -p ",RNKdir,"; mv rnk-* sig-* sip-* ",RNKdir,sep="")
# message("\n.. now executing: ",cmd)
  system(cmd)
  readme <- paste("RNK - Genomic feature regions ranked by CpGhsm statistics.\n\n",
                  "Input: studymk, region.gr (GRanges object providing annotated region labels and bounds)\n\n",
                  "Output: files rnk_sig-*.txt/pdf rnk_sip-*.txt/pdf sig-*.txt sip-*.txt\n\n",
                  "Notes: The files rnk_sig-*.txt provide ranked lists of genes based on the occurrence of\n",
                  "        CpGhsm sites within the annotated gene bounds.  The output columns are\n",
                  "          region_ID    (= region/gene name)\n",
                  "          rwidth       (= region/gene width)\n",
                  "          nbrsites     (= number of CpGhsm sites in the region/gene)\n",
                  "          nbrper10kb   (= number of CpGhsm sites in the region/gene normalized to 10kb width)\n",
                  "          pmrpersite   (= average % methylation per CpGhsm site in the region/gene)\n",
                  "          pmrpernucl   (= average % CpGhsm methylation per nucleotide in the region/gene)\n\n",
                  "        The table is sorted by nbper10kb in descending order.\n\n",
                  "       The files rnk_sip-*.txt provide analogous tables for promoter regions.\n",
                  "        If the promoter annotation was derived with BWASP, then these regions are simply\n",
                  "        defined here as 500 nucleotides upstream of the 5'-end of the gene (shorter if the\n",
                  "        scaffold ends before).\n\n",
                  "       The files sig-*.txt and sip-*.txt provide details for the CpGhsm sites in the respective.\n",
                  "        regions.\n\n",
                  "       The files rnk-sig-*.pdf and rnk-sip-*.pdf show plots of the ordered nbper10kb values in\n",
                  "        the respective regions for a simple visualization of the corresponding tables.\n",
                  sep="")
  readmefile <- paste(RNKdir,"0READMErnk",sep="/")
  sink(readmefile)
  cat(sprintf("%s",readme))
  sink()
  message(".. done ...")
}


if (RUNmprr) {
#Produce mpr-*txt and mrr-*.txt files reporting on methylation-poor and -rich regions.
#Also: dst-*.txt (distance statistics)
#      1ds-*.pdf 5ds-*.pdf (distance histograms)
#      mdr-*.tab mdr-*.bed (methylation dense regions)
#      gwr-*.txt (genes with methylation dense regions)
#      rmp-*.txt (regions mapped to genome features)
#
  ddset <- c(1,5)
  nr2d <- 10L
  doplots <- TRUE
  message("\n.. methylation-poor and -rich regions for aggregate samples ...")
  hsmrList <- lapply(c(1:length(sampleLabels)),function(i) {
    outfile  <- paste("dst",sampleLabels[i],sep="-")
    outfile  <- paste(outfile,"txt",sep=".")
    hsmrL <- det_mprr(studymk[[i]],sampleLabels[i],ddset,outfile,nr2d,doplots)
    return(hsmrL)
    }
    )
  message(".. done ...")

  message("\n.. mapping of methylation-poor and -rich regions to genome features ...")
  if (!exists("genome_ann")) {
    genome_ann <- get_genome_annotation(infiles$parameters)
  }
  gwrList <- lapply(c(1:length(sampleLabels)),function(i) {
     outfile  <- paste("rmp",sampleLabels[i],sep="-")
     outfile  <- paste(outfile,"txt",sep=".")
     gwithrdf <- map_mprr(hsmrList[[i]],species=species,sampleLabels[i],
                          genome_ann,gnmsize,UTRflag=UTRFLAGSET,outfile)
     }
     )
  MPRRdir <- paste(outputdir,"MPRR",sep="/")
  cmd <- paste("mkdir -p ",MPRRdir,"; mv 1ds-* 5ds-* dst-* gwr-* mdr-* mpr-* mrr-* rmp-* ",MPRRdir,sep="")
# message("\n.. now executing: ",cmd)
  system(cmd)
  readme <- paste("MPRR - Methylation-poor and -rich regions.\n\n",
                  "Input: studymk, genome_ann (a list of GRanges objects providing annotated region labels and bounds;\n",
                  "                            output of BWASPR::get_genome_annotation())\n\n",
                  "Output: files dst-*.txt 1ds-*.pdf 5ds-*.pdf	mpr-* mrr-*	rmp-* gwr-*\n\n",
                  "Notes: Methylation-poor and -rich regions are determined based on the spacing between\n",
                  "        neighboring CpGhsm sites.  If sites occur at positions a,b,c,d,e, and f \n",
                  "        (and not in between), then b-a, c-b, ... are 1-distances, and f-a is a 5-distances.\n",
                  "        The file dst-*.txt shows the empirical distribution of d-distances for the sample.\n",
                  "        Methylation-poor regions are determined as long 1-distances (in the top 10%; merged\n",
                  "        if adjacent 1-distances are both in the top 10%).  Methylation-rich regions are determined\n",
                  "        as short 5-distances (in the low 10%; merged if adjacent 5-distances are both in the low\n",
                  "        10%).  Parts of the distribution are plotted in the 1ds-*.pdf and 5ds-*.pdf files.\n\n",
                  "       The methylation-poor and -rich regions are listed in files mpr-*.txt and mrr-*.txt,\n",
                  "        respectively.\n\n",
                  "       The overlap of methylation-rich regions with genome features is summarized in files rmp-*.txt.\n",
                  "        Files gwr-*.txt show genes overlapping with methylation-rich regions, ordered by site\n",
                  "        density in the methylation-rich region.\n",
                  sep="")
  readmefile <- paste(MPRRdir,"0READMEmprr",sep="/")
  sink(readmefile)
  cat(sprintf("%s",readme))
  sink()
  message(".. done ...")
}
################################################################################



### Section: Evaluating differential methylation patterns.
##
#
if (RUNdmsg) {
#Determine differentially methylated sites and genes.
#  Output will be in dms-* and dmg-* files.
#
  message("\n.. determining differentially methylated sites and genes ...")
  if (!exists("genome_ann")) {
    genome_ann <- get_genome_annotation(infiles$parameters)
  }
  studyhc <- mcalls2mkobj(infiles$datafiles,species,study,
                          sample=samplelist,replicate=c(0),type=ctype,
                          mincov=highcoverage,assembly=asmblv)

  outfile1 <- paste("dms",species,sep="-")
  outfile1 <- paste(outfile1,studyLabel,sep="_")
  outfile1 <- paste(outfile1,"txt",sep=".")
  outfile2 <- paste("dmg",species,sep="-")
  outfile2 <- paste(outfile2,studyLabel,sep="_")
  outfile2 <- paste(outfile2,"txt",sep=".")
  dmsgList <- det_dmsg(studyhc,genome_ann,threshold,qvalue,mc.cores=numprc,
                       destrand,outfile1,outfile2)
  DMSGdir <- paste(outputdir,"DMSG",sep="/")
  cmd <- paste("mkdir -p ",DMSGdir,"; mv dmg* dms* ",DMSGdir,sep="")
# message("\n.. now executing: ",cmd)
  system(cmd)
  readme <- paste("DMSG - Differentially methylated sites and genes.\n\n",
                  "Input: studyhc threshold qvalue\n",
                  "       The CpGscd data input (mcstudy) is necessary to determine sites that are detectable\n",
                  "        in both samples, and nbrpms (listed in the *.par file specified in the ",configfile,"\n",
                  "        configuration file as argument to TOTALNBRPMSITES) provides the total number of\n",
                  "        potential methylation sites (typically, all CpG sites), a necessary parameter for\n",
                  "        the estimations.\n\n",
                  "Output: files dms-*.txt dmg-*.txt	dmg-*details.txt dmg-*heatmaps.pdf	ogl-*.txt rnk-dmg-*.txt\n\n",
                  "Notes: Output files dms-*.txt and dmg-*.txt are generated by BWASPR::det_dmsg() and show the\n",
                  "        differentially methylated sites and genes as determined by methylKit::getMethylDiff with\n",
                  "        parameters difference=threshold and qvalue, as provided in the ",configfile,"\n",
                  "        configuration file.  The table of differentially methylated genes contains all genes\n",
                  "        with at least one differentially methylated site.\n\n",
                  "       The files dmg-*details.txt, generated by BWASPR::show_dmsg(), show all CpGscd sites in\n",
                  "        the differentially methylated genes, with coverage numbers and methylation percentages.\n\n",
                  "       The files dmg-*heatmaps.pdf, generated by BWASPR::show_dmsg(), give heatmap displays for\n",
                  "        genes meeting the following criteria: 1) there are between minNsites and maxNsites common\n",
                  "        CpGscd sites; 2) at least minPdmsites % of these sites are differentially methylated sites.\n",
                  "        The parameters are set in the ",configfile," configuration file.\n\n",
                  sep="")
  readmefile <- paste(DMSGdir,"0READMEdmsg",sep="/")
  sink(readmefile)
  cat(sprintf("%s",readme))
  sink()
  message(".. done ...")
}


if (RUNdmgdtls) {
#Provide details for differentially methylated genes.
#  Output will be in file dmg-*details.txt.
#
  if (!RUNload & !RUNdmsg) {
    message("ERROR: missing input.  Set RUNload=TRUE or RUNdmsg=TRUE.")
    q()
  }
  outflabel <- paste(species,studyLabel,sep="_")
  message("\n.. deriving details for differentially methylated genes ...")
  dmgprp <- show_dmsg(studyhc,dmsgList,destrand,minNsites,maxNsites,minPdmsites,
                      mc.cores=numprc,outflabel)
  cmd <- paste("mv dmg* ",DMSGdir,sep="")
# message("\n.. now executing: ",cmd)
  system(cmd)
  message(".. done ...")
}


if (RUNogl) {
#Print out ordered gene lists ordered gene lists with tabulated methylation
#  properties (files ogl-*).
#
  if (!RUNload & !(RUNdmsg & RUNdmgdtls)) {
    message("ERROR: missing input.  Set RUNload=TRUE or RUNdmsg=RUNdmgdtls=TRUE.")
    q()
  }
  outflabel <- paste(species,studyLabel,sep="_")
  message("\n.. printing ordered gene lists ...")
if (maxgwidth > 0  |  minnbrdmsites > 1) {
  summaries <- explore_dmsg(studyhc,genome_ann,dmgprp,-1,
                            1,withglink=glink,outflabel)
  rnk_summaries <- rank_dmg(summaries,outflabel)
  OGLalldir <- paste(outputdir,"OGLall",sep="/")
  cmd <- paste("mkdir -p ",OGLalldir,"; mv ogl* rnk-dmg* wrt-* ",OGLalldir,sep="")
# message("\n.. now executing: ",cmd)
  system(cmd)
}

  summaries <- explore_dmsg(studyhc,genome_ann,dmgprp,maxgwidth,
                            minnbrdmsites,withglink=glink,outflabel)
  rnk_summaries <- rank_dmg(summaries,outflabel)
  OGLdir <- paste(outputdir,"OGL",sep="/")
  cmd <- paste("mkdir -p ",OGLdir,"; mv ogl* rnk-dmg* wrt-* ",OGLdir,sep="")
# message("\n.. now executing: ",cmd)
  system(cmd)

  readme <- paste("OGL - Ordered gene lists.\n\n",
                  "Input: studyhc annotation   maxgwidth minnbrdmsites\n",
                  "       dmgprp (= output of BWASPR:show_dmsg())\n\n",
                  "Output: files ogl-*.txt rnk-dmg-*.txt\n",
                  "         ogl-<study>_<sample>.txt ogl-<study>_<sample1>.vs.<sample2>.txt\n",
                  "         rnk-dmg--<study>_<sample1>.vs.<sample2>.txt rnk-dmg--<study>_<sample1>.vs.<sample2>.pdf\n",
                  "         wrt-<study>.txt\n\n",
                  "Notes: Output files ogl-<study>_<sample>.txt give tables for each sample with columns\n\n",
                  "        gene_ID gwidth #Sites #per10Kb %perSite %pNucl\n\n",
                  "       ordered by %pNucl.  If available, a link to an NCBI entry of gene_ID is inserted as second column.\n",
                  "       Abbreviations used: %perSite, percent methylation per site\n",
                  "                           %perNucl, percent methylation per nucleotide of the gene\n\n",
                  "       Output files ogl-<study>_<sample1>.vs.<sample2>.txt give tables for each comparison with columns\n\n",
                  "        gene_ID gwidth #Sites #per10Kb #dmSites #dmsp10kb %dmSites %psite1 %psite2 DMpSite ADMpSite DMpNucl ADMpNucl\n\n",
                  "       ordered by DMpsite.  If available, a link to an NCBI entry of gene_ID is inserted as second column.\n",
                  "       Abbreviations used: %dmSites, percent sites that are differentially methylated\n",
                  "                           %psite1, average per site % methylation for sample1\n",
                  "                           %psite2, average per site % methylation for sample2\n",
                  "                           DMpsite, average per site difference in % methylation between sample1 and sample2\n",
                  "                           ADMpsite, absolute value of DMpsite\n",
                  "                           DMpNucl, gene\n",
                  "                           DMpNucl, average per nucleotide difference in % methylation between sample1 and sample2\n",
                  "                           ADMpNucl, absolute value of DMpNucl\n\n",
                  "       Output files rnk-dmg-<study>_<sample1>.vs.<sample2>.txt are equivalent to files\n",
                  "        ogl-<study>_<sample1>.vs.<sample2>.txt but ordered by ADMpNucl.\n",
                  "       Output files rnk-dmg-<study>_<sample1>.vs.<sample2>.pdf provide visualization of the distribution\n",
                  "        of ADMpNucl values.\n\n",
                  "       Output file wrt-<study>.txt gives results of the Wilcoxon signed rank test comparing\n",
                  "        the %psite1 and %psite2 vectors\n\n",
                  "       In output directory OGL, tables are restricted to genes with gwidth <= maxgwidth and, for\n",
                  "        pairwise comparisons, #dmSites >= minnbrdmsites\n\n",
                  "       If either maxgwidth or minnbrdmsites is set, then output directory OGLall will show the full tables\n",
                  "        with all genes (for reference).\n\n",
                  sep="")
if (maxgwidth > 0  |  minnbrdmsites > 1) {
  readmefile <- paste(OGLalldir,"0READMEogl",sep="/")
  sink(readmefile)
  cat(sprintf("%s",readme))
  sink()
}
  readmefile <- paste(OGLdir,"0READMEogl",sep="/")
  sink(readmefile)
  cat(sprintf("%s",readme))
  sink()
  message(".. done ...")
}
################################################################################



if (RUNsave) {
# Save everything ... (for later restart with the load command).
#
  outflabel <- paste(species,studyLabel,sep="_")
  rdatafile <- paste(outflabel,"RData",sep=".")
  save.image(file=rdatafile)
}
